<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
  <!--

        Entries that MUST appear in either Web.config or app.config if WSE configuration elements are used.

    -->
  <!--

        Configuration of the WSE specific configuration handlers.

    -->
  <configSections>
    <section name="microsoft.web.services3" type="Microsoft.Web.Services3.Configuration.WebServicesConfiguration, Microsoft.Web.Services3, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
  </configSections>
  <!--

        Entries that may appear in Web.config

    -->
  <system.web>
    <!--

            The following defines the WSE SoapServerProtocol that is used to pre/post process Web service requests
            for Web Services built with the Microsoft .NET Framework ASMX support. It must appear in the
            Web.config file for each Web that contains a Web service that will use the the WSE features

            This entry is NOT required for Web Services built with the WSE 3.0 Messaging framework.

        -->
    <webServices>
      <soapServerProtocolFactory type="Microsoft.Web.Services3.WseProtocolFactory, Microsoft.Web.Services3, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
    </webServices>
    <!--

            The following defines the WSE HttpHandler which implements a WS-Routing compliant SOAP router.
            By default, the configuration below specifies that the router handles ALL incoming requests for
            resources that match "*.ashx". The path attribute should be modified to use a more specific path
            value for the URL that the router will service. Multiple entries are possible allowing the router
            to replace an existing Web service and delegate that service to a different URL.

        -->
    <httpHandlers>
      <!-- Change the path attribute to match whatever endpoints you want the routing handler to process -->
      <add verb="*" path="*.ashx" type="Microsoft.Web.Services3.Routing.RoutingHandler, Microsoft.Web.Services3, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
    </httpHandlers>

  </system.web>
  <!--

        The following section provides WSE Runtime configuration and should be placed in app.config and/or
        Web.config. Where practical, the WSE contains reasonable defaults for most sections.

    -->
  <microsoft.web.services3>
    <!--

            Diagnostics specific configuration. This section is not required for a default installation. It
            may be used to enable the WSE Trace functionality or to enable server return the detail of
            exception.

        -->
    <diagnostics>
      <!--
            
                NOTE: Enabling tracing has a significant performance penalty and should only be used for
                     development purposes.
             -->
      <!--
                Configures the message tracing facility.

                The "enabled" attribute is required for the <trace> element, whereas "input" and "output" are not.

                If the "input" and "output" attributes are not provided, the default file
                name of "inputTrace.webinfo" and "outputTrace.webinfo" are used. This file will reside in the
                application's base directory.

            <trace enabled="false" input="inputTrace.webinfo" output="outputTrace.webinfo"/>
            -->
      <!--
                Configures the error reporting facility.  

                The "enabled" attribute is required for the <detailedErrors> element, and its default value is false.

                If the enabled attribute is set to true explicitly, WSE will send back the detailed error information, 
                i.e. a full stack trace as well as the information about all the inner exceptions. If the enabled 
                attribute is set to false explicitly, WSE will send back the custom (friendly) messages, i.e. the top
                level exception message without stack trace and information about the inner exceptions.

                The detailedErrors section is optional.  If it is not present, for http or https request, the customErrors
                under the system.web section will be used to decide whether WSE will send back the custom (friendly) message.
                Please refer to the ASP.NET configruation section for further information. For all the other transports, WSE 
                will always send back the custom (friendly) message. 

            <detailedErrors enabled="false"/>
            -->
    </diagnostics>
    <!--

            Messaging configuration. This section is not required for a default installation. It may
            be used to add, remove or configure transports to be used to send and receive messages.

        -->
    <messaging>
      <!-- 
                mtom element allows users to turn on or off the MTOM feature on the client side.
                It also allows users to specify whether the server supports mtom or not.  The value in the 
                clientMode could be either on or off; the value in the serverMode could be either optional,
                always or never.  Note here the client mode controls both outgoing request and incoming response, 
                and the server mode controls both the incoming request and outgoing response.
                The client mode is a app domain wide setting, and in the mean while, each individual message can
                choose to use mtom or not by modifying the RequireMtom property on the proxy which will override 
                this configuration setting.  

                In addition to that, the requireSoapEnvelopeFirst value provides a way for user to turn on/off 
                the enforcement of requiring the soap envelope to be the first MIME part.  Its default value is true.
                The maxMimeParts value spefiy the maximum number of mime parts a WSE receiver will allow.  The default
                value is 64.

            <mtom clientMode="off" serverMode="optional" requireSoapEnvelopeFirst="true" maxMimeParts="64" />
              -->


      <!--

                The allowRedirectedResponses element controls whether messages that contain
                From, ReplyTo or FaultTo value that redirect to a different endpoint are obeyed.
                The default is that they are not and that all response and fault messages are
                returned to the original sender. Enable this only if you require support for
                redirection of response and/or fault messages.

            <allowRedirectedResponses enabled="false" />
            -->
      <!--

                The executionTimeoutInSeconds section defines a user supplied maximum time that 
                a request is allowed to process for. The default value is 90 seconds. 
                Specifying -1 means infinite.

            <executionTimeoutInSeconds value="90" />
            -->
      <!--

                The maxMessageLength section defines a user supplied maximum message length to accept.
                The default value is 4096.  Specifying -1 means infinite.

            <maxMessageLength value="KBytes size of maximum message length to accept" />
            -->
      <!--
               Specifies the formatter type that handles attachments. By default the 
               Microsoft.Web.Services3.Messaging.SoapDimeFormatter is used.

               <asmxAttachmentFormatter type="<Insert Type here>" />
            -->


      <!--
               Specifies the formatter type that handles plain messages without attachments. 
               By default the Microsoft.Web.Services3.Messaging.SoapPlainFormatter type is 
               used.

               <asmxPlainFormatter type="<Insert Type here>" />
            -->

      <transports>
        <!--

                    The following directives may appear in the transports section:

                    add:    Adds a transport scheme to the system. The scheme attribute is required, the
                            type attribute is required for all schemes other than the WSE supported schemes
                            (http, https, soap.inproc and soap.tcp). The type attribute specifies a type
                            that must implement the ISoapTransport interface. Child elements of the add
                            element are passed to the specified type as configuration data.

                    clear:  Removes all registered transports.

                    remove: Removes the transport associated with the specified scheme.

                -->
        <!--
                <clear />
                -->
        <!--

                    Sample custom transport registration.

                <add scheme="<insert scheme here>" type="<insert type reference here> " />
                -->
        <!--

                    There are no configuration options for the http transport.

                <add scheme="http" />
                -->
        <!--

                    There are no configuration options for the https transport.

                <add scheme="https" />
                -->
        <!--

                    There are no configuration options for the soap.inproc transport.

                <add scheme="soap.inproc" />
                -->
        <!--

                    The default configuration for the soap.tcp transport enables TCP_NODELAY (i.e. it
                    disables the use of the Nagle algorithm and uses EXCLUSIVEADDRUSE to prevent
                    port hijacking.IdleTimeoutInMilliSeconds is used to close inactive
                    connections; by default it is set to 120000 milliseconds (2 minutes), it must be
                    at least 30000 milliseconds. The sendTimeoutInMilliSeconds and receiveTimeoutInMilliSeconds values control
                    the time allowed to serialize or deserialize a message on the network.
                    
                    The connectionLimit element controls the maximum numbers of connections from
                    and to the application. Connections to localhost addresses are unlimited. These
                    connections apply for the application, not for individual endpoints. Use -1
                    to specify unlimited.
                    
                    The hosts element may be used to block incoming connection attempts. The allow
                    and deny elements each contain a list of masks to match the incoming connection
                    attempt with. Values in this list can be:
                    
                    hostname:        This is translated to an entry for each IP address for the host
                    IP address:      An IPv4 or IPv6 address
                    IP address mask: Used to identify a range of addresses. Specified in the form
                                     address/prefix-length, for example, 192.168.1.0/24.
                    all:             Literal value used to match all addresses.                                     
                    
                    The default attribute specifies the default result of the access check. In addition
                    it also controls the order in which the lists are processed:
                    
                    allow:  Access is allowed by default, the deny masks are processed before
                            the allow masks. This is the default setting for the product.
                    deny:   Access is denied by default, the allow masks are processed before
                            the deny masks.
                    

                <add scheme="soap.tcp" >
                    <exclusiveAddressUse enabled="true" />
                    <defaultPort value="8081" />
                    <idleTimeoutInMilliSeconds value="120000" />
                    <sendTimeoutInMilliSeconds value="90000" />
                    <receiveTimeoutInMilliSeconds value="90000" />
                    <noDelay enabled="true" />
                    <connectionLimit inbound="16" outbound="16" />
                    <hosts default="allow" >
                        <allow value="List of Hosts seperated by spaces" />
                        <deny value="List of Hosts seperated by spaces"/>
                    </hosts>
                </add>
                -->
        <!--

                <remove scheme="soap.inproc" />
                -->
      </transports>
    </messaging>
    <!--

            Referral specific configuration.  This section is not required for a default installation.

        -->
    <referral>
      <!--

                The referralCache element points to the referral cache file that is used to make routing
                decisions. If this section is not provided, the default file name of "referralCache.config"
                is used and the file will reside in the applications base directory.  If this section is provided,
                the file specified must exists.  Exception will be raised otherwise.

            <cache name="referralCache.config" />
            -->
    </referral>

    <!--

            Policy specific configurations.
 

                The specified policy document will be loaded and its contents will be
                interpreted and applied to all incoming and outgoing messages sent to this application if
                the policy/@fileName attribute is provided.

        -->
    <policy fileName="policyCache.config" />

    <!--

            WS-Security specific configurations.  This section is not required for a default installation,
            however users should strongly consider including a modified <x509> element in their client
            application configuration that selects the "CurrentUser" store in preference to the "LocalMachine"
            store.

        -->
    <security>

      <!--

	   	<keyIdentifierMapping>

	    -->
      <!-- 

				for Derived Key Token
			<add valueType="http://schemas.xmlsoap.org/ws/2005/02/sc/dk" tokenType="http://schemas.xmlsoap.org/ws/2005/02/sc/dk">

			-->

      <!--
				for Kerboeros token
			<add valueType="http://docs.oasis-open.org/wss/oasis-wss-kerberos-token-profile-1.1#Kerberosv5APREQSHA1" tokenType="http://docs.oasis-open.org/wss/oasis-wss-kerberos-token-profile-1.1#GSS_Kerberosv5_AP_REQ">
			-->

      <!--
				for SCT
			<add valueType="http://schemas.xmlsoap.org/ws/2005/02/sc/sct" tokenType="http://schemas.xmlsoap.org/ws/2005/02/sc/sct">
			-->

      <!--
				for Username token 
			<add valueType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#UsernameToken" tokenType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#UsernameToken">
			-->

      <!--
				for EncryptedKeyToken
			<add valueType="http://docs.oasis-open.org/wss/oasis-wss-soap-message-security-1.1#EncryptedKeySHA1" tokenType="http://docs.oasis-open.org/wss/oasis-wss-soap-message-security-1.1#EncryptedKey">
			-->

      <!-- for x509 token

			<add valueType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509SubjectKeyIdentifier" tokenType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3">			
			<add valueType="http://docs.oasis-open.org/wss/oasis-wss-soap-message-security-1.1#X509ThumbprintSHA1" tokenType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3">
			<add valueType="http://docs.oasis-open.org/wss/oasis-wss-soap-message-security-1.1#ThumbprintSHA1" tokenType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3">
				       
			-->

      <!--
           	</keyIdentifierMapping>
            -->

      <!-- Turn this on if a empty canonicalization transform chain is desired.  
              Default value is false. 
	      
              <allowEmptyTransform enabled="false" />
      
            -->


      <!--

                Limits configuration. The section below shows the limits that are imposed.
                during processing of an incoming wsse:Security header. These limits are
                intended to allow detection of unexpected security content. The values 
                shown are the defaults for the product.
                
                maxTokens:          The maximum number of tokens
                maxSignedItems:     The maximum number of signed items (cumulative for all signatures)
                maxEncryptedItems:  The maximum number of encrypted items
                
            <limits maxTokens="5" maxSignedItems="16" maxEncryptedItems="5" />
            -->
      <!--

                Cryptographic configuration. The sections below are the defaults for the product.
                Changes to these defaults should only be undertaken with extreme care.

            <cryptography>

                <encryptionFormatters>
                    <add uri="http://www.w3.org/2001/04/xmlenc#aes128-cbc" type="Microsoft.Web.Services3.Security.Cryptography.AES128EncryptionFormatter" />
                    <add uri="http://www.w3.org/2001/04/xmlenc#aes192-cbc" type="Microsoft.Web.Services3.Security.Cryptography.AES192EncryptionFormatter" />
                    <add uri="http://www.w3.org/2001/04/xmlenc#aes256-cbc" type="Microsoft.Web.Services3.Security.Cryptography.AES256EncryptionFormatter" />
                    <add uri="http://www.w3.org/2001/04/xmlenc#tripledes-cbc" type="Microsoft.Web.Services3.Security.Cryptography.TripleDESEncryptionFormatter" />
                    <add uri="http://www.w3.org/2001/04/xmlenc#rsa-1_5" type="Microsoft.Web.Services3.Security.Cryptography.RSA15EncryptionFormatter" />
                </encryptionFormatters>

                <keyExchangeFormatters>
                    <add uri="http://www.w3.org/2001/04/xmlenc#kw-aes128" type="Microsoft.Web.Services3.Security.Cryptography.AES128KeyExchangeFormatter" />
                    <add uri="http://www.w3.org/2001/04/xmlenc#kw-aes192" type="Microsoft.Web.Services3.Security.Cryptography.AES192KeyExchangeFormatter" />
                    <add uri="http://www.w3.org/2001/04/xmlenc#kw-aes256" type="Microsoft.Web.Services3.Security.Cryptography.AES256KeyExchangeFormatter" />
                    <add uri="http://www.w3.org/2001/04/xmlenc#kw-tripledes" type="Microsoft.Web.Services3.Security.Cryptography.TripleDESKeyExchangeFormatter" />
                    <add uri="http://www.w3.org/2001/04/xmlenc#rsa-1_5" type="Microsoft.Web.Services3.Security.Cryptography.RSA15KeyExchangeFormatter" />
                    <add uri="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p" type="Microsoft.Web.Services3.Security.Cryptography.RSAOAEPKeyExchangeFormatter" />
                </keyExchangeFormatters>

                <signatureFormatters>
                    <add uri="http://www.w3.org/2000/09/xmldsig#hmac-sha1" type="Microsoft.Web.Services3.Security.Cryptography.HMACSHA1SignatureFormatter" />
                    <add uri="http://www.w3.org/2000/09/xmldsig#rsa-sha1" type="Microsoft.Web.Services3.Security.Cryptography.RSASHA1SignatureFormatter" />
                </signatureFormatters>

                <keyAlgorithm>
                    <add name="AES128" type="Microsoft.Web.Services3.Security.Cryptography.AES128" />
                    <add name="AES192" type="Microsoft.Web.Services3.Security.Cryptography.AES192" />
                    <add name="AES256" type="Microsoft.Web.Services3.Security.Cryptography.AES256" />
                    <add name="RSA15" type="Microsoft.Web.Services3.Security.Cryptography.RSA15" />
                    <add name="RSAOAEP" type="Microsoft.Web.Services3.Security.Cryptography.RSAOAEP" />
                    <add name="TripleDES" type="Microsoft.Web.Services3.Security.Cryptography.TripleDES" />
                </keyAlgorithm>

            </cryptography>
            -->
      <!--

                The x509 element defines configuration settings for the WSE X.509 certificate
                support.

                The storeLocation attribute defines which store the WSE should search when
                attempting to verify a certificate for a trusted root or when attempting to
                retrieve a certificate by name. Values for this attribute can be either
                "LocalMachine" or "CurrentUser". Typically, client-side uses "CurrentUser"
                whilst server-side uses "LocalMachine". The default is "LocalMachine".

                The verifyTrust property determines whether the WSE verifies that certificates
                used to sign a message have an issuer chain that extends to a trusted root authority.
                Values for the attribute are either "true" or "false" with the default as "true".

                The allowTestRoot property modifies the trust verification process to allow
                certificates signed by a test root to pass the verification. Values for this
                attribute are either "true" or "false".

                The revocationMode corresponds to CLR x509 chain policy enum. 
                This attribute value decided whether we will do URL retrieval in the revocation checking. 
                When it is NoCheck, no revocation checking will be performed.  When it is Offline, only accesses cached URLs 
		and the WSE does not hit the wire to do any revocation URL retrieval.  When it is Online, the revocation 
                sever will be contacted for revocation retrieval.  The default is Online.

                The verificationMode gives user an ability to choose whether they want to allow TrustedPeople store
                to be searched before doing chain verification.  It has three options, TrustedPeopleOnly, ChainOnly and 
                TrustedPeopleOrChain.  If it is TrustedPeopleOnly, then the server will only match the incoming certificate
                with the certificate in the Trusted people store.  If it is ChainOnly, then the server will try to build
                a trusted certificate chain and do the verification.  If it is TrustedPeopleOrChain, then the server will 
                trust the certificate if either one succeed.  The default is TrustedPeopleOrChain.
                                
		            The skiMode attribute determines the algorithm which will be used to compute the
                value of the Subject Key Identifier for a certificate that does not contain this
                extension. It can contain four values: RFC3280, CAPI, IssuerSerial, and ThumbprintSHA1.  
                RFC3280 mode corresponds to a RFC3280 compliant algorithm, CAPI mode corresponds to Windows CAPI 
                algorith, and ThumbprintSHA1 mode is simply computing a SHA1 hash of the x509 raw data. When IssuerSerial
                is chosen, instead of a KeyIdentifier element, a dsig:X509Data\dsig:X509IssuerSerial element is generated
                as the only clause within the wsse:SecurityTokenReference. 

                The example below shows the default values.

            <x509
                storeLocation="LocalMachine"
                verifyTrust="true"
                allowTestRoot="false"
                revocationMode="Online"
                verificationMode="TrustedPeopleOrChain"
                skiMode="ThumbprintSHA1" />
            -->
      <!--

                The binarySecurityTokenManager element defines a user supplied class that supports
                the Microsoft.Web.Services3.Security.Tokens.ISecurityTokenManager interface to
                manage the authentication and loading of binary security tokens from soap envelopes
                and from policy documents.

                Multiple security managers may be declared but each must
                be registered for a unique value type.

            <binarySecurityTokenManager>
            -->
      <!--
                
                    Add each BinaryTokenManager using a <add> element.
                    
                <add valueType="<insert valueType uri string here>" type="<insert type reference here>"> -->
      <!--
                    
                        For X509 Security Token, it is possible to configure the key algorithm used.
                        Possible values include RSA15 and RSAOAEP. For the former, key transport is
                        performed using the RSA15 algorithm, for the latter it is performed using
                        RSA_OAEP
                    
                    <keyAlgorithm name="RSAOAEP" />
                    -->
      <!--

                        If the securityTokenManager is pointing to the built-in KerberosTokenManager, or any 
                        custom Security Token Manager type which derives from it,
                        this value, specified in seconds, defines the time period immediately prior to token expiry
                        during which the token becomes invalid. The token should then be renewed.
                        
                        The element is optional.  The default renewal window is 60 seconds.
                   
                    <renewalWindowInSeconds value="60" />
                    -->
      <!--

                    For X509 Security Token, it is possible to configure the key algorithm used for bulk
                    encryption operations. Possible values include AES128, AES192, AES256 or TripleDES.
                    The default is AES256.

                    <sessionKeyAlgorithm name="AES256" />
                    -->
      <!--
                 </add> -->

      <!--
                 
                     Clear all the previously added Security Tokens by specifying the clear
                     element. Any token added after this will be added to the collection.
                 <clear/> -->

      <!--
                 
                     Remove a particular Security token in a collection using the Remove element.
                     
                  <remove valueType="<insert valueType uri string here>" /> -->
      <!--
            </binarySecurityTokenManager>
            -->
      <!--

                The securityTokenManager element defines a user supplied class that supports
                the Microsoft.Web.Services3.Security.Tokens.ISecurityTokenManager interface to
                manage the authentication and loading of XML security tokens from soap envelopes
                and from policy documents.

                Multiple security managers may be declared but each must
                be registered for a qualified name. This qualified name is interpreted as the
                name of the xml element which defines the security token in the <wsse:Security/> header.

            <securityTokenManager>
            -->
      <!--
                
                    We Add each SecutityTokenManager using the <add> element.
                    
                <add  localName="<insert local name here>" namespace="namespace uri that qualifies the localname" type="<insert type reference here>" >    -->
      <!--
                    
                        If the securityTokenManager is pointing to the built-in UsernameTokenManager or any custom Security
                        Token Manager type which derives from UsenameTokenManager, it can turn on/Off the replay detection by
                        the following section.  The windowInSeconds attribute defines how long the replay window is, and that
                        is also the time period we allow for created timestamp.

                    <replayDetection enabled="false" windowInSeconds="300" />
                    -->
      <!--

                        If the securityTokenManager is pointing to the built-in SecurityContextTokenManager, or any 
                        custom Security Token Manager type which derives from it,
                        this value, specified in seconds, defines the time period immediately prior to token expiry
                        during which the token becomes valid for renewal.
                        
                        The element is optional.  The default renewal window is 60 seconds.
                   
                    <renewalWindowInSeconds value="60" />
                    -->
      <!--

                        If the securityTokenManager is pointing to the built-in SecurityContextTokenManager or
                        KerberosTokenManager type, or any custom Security Token Manager type which derives from
                        KeyIdentifierCachedSecurityTokenManager, its cacheLimit can be configured in the
                        following element.  This element is optional and the default size is 2048.

                    <cacheLimit value="insert a upperbound for SecurityContextTokenCache here" />
                    -->
      <!--

                        If the securityTokenManager is pointing to the built-in DerivedKeyTokenManager or 
                        any custom Security Token Manager type which derives from DerivedKeyTokenManager, its 
                        generation limit can be configured in the following element.  This element is optional 
                        and the default size is 64.

                    <generationLimit value="insert a upperbound for generation here" />
                    -->

      <!--

                      If the securityTokenManager is pointing to the built-in DerivedKeyTokenManager or 
                      any custom Security Token Manager type which derives from DerivedKeyTokenManager, the length of 
                      the derived key used for signature only can be controlled with the signatureKeyLength element. 
                      This value controls the length of the derived key whenever a new instance of the DerivedKeyToken 
                      is created with the constructor parameter isForSigningOnly equal to true. This element is optional 
                      and its default value is 192. If specified, the value must be a positive multiple of 8. 

                  <signatureKeyLength value="insert the length of derived key for signature in bits" />
                    -->      
      <!--

                        If the securityTokenManager is pointing to the built-in DerivedKeyTokenManager or 
                        any custom Security Token Manager type which derives from DerivedKeyTokenManager, its 
                        offset limit can be configured in the following element.  This element is optional 
                        and the default size is 1024.

                    <offsetLimit value="insert a upperbound for offset here" />
                    -->
      <!--

                        If the securityTokenManager is pointing to the built-in UsernameTokenManager type,
                        its default Label string can be configured in the following element.  This element
                        is optional and the default label is "WS-Security".

                    <label value="insert label here" />
                    -->
      <!--

                        For all built-in SecurityTokenManager types, users can add the following element to configure
                        a default key algorithm for a certain token type.  Here is a list of built-in names: AES128,
                        AES192, AES256, TripleDES, RSA15, RSAOAEP.  Users can also add their own custom key
                        algorithm by registering those types using the keyAlgorithm section of the cryptography
                        configuration element. The keyAlgorithm element is optional, it's default for the
                        symmetric key based tokens is AES256 except Kerberos Token. For the X509 token, its default
                        is RSAOAEP.
                        

                    <keyAlgorithm name="AES256" />
                    -->
      <!--
                        Users can add some custom sub-elements here, and the custom token manager
                        will need to have a constructor which looks like this

                                public CustomTokenManager(XmlNodeList configData){};

                        The given configData is a list of configuration elements, and constructor can passed it to
                        retrieve the value.

                    -->
      <!--
                 
                 </add> -->

      <!--
                 
                     Clear all the previously added Security Tokens by specifying the clear
                     element. Any token added after this will be added to the collection.
                 <clear/> -->

      <!--
                 
                     Remove a particular Security token in a collection using the Remove element.
                     
                  <remove localName="<insert local name here>" namespace="namespace uri that qualifies the localname" /> -->
      <!--
            </securityTokenManager>
            -->
      <!--

                The defaultTtlInSeconds section defines a user supplied time-to-live for every outgoing message.
                It is optional, and its default value is 5 minutes. SoapContext.Security.Timestamp.TtlInSeconds is used
                to set a time-to-live for some particular message.

            <defaultTtlInSeconds value="insert a default time-to-live for the every message" />
            -->
      <!--

                The timeToleranceInSeconds section defines a user supplied time buffer when WSE is comparing
                current time against creation time for post dated and expiration time for past time.  It is usually
                the time skew between client and server machine.  Default is five minutes.

            <timeToleranceInSeconds value="insert the time tolerance for timestamp checking" />
            -->
    </security>
    <!--

           Token Issuing service related specification.  This section is not required for a default installation.
           
        -->
    <tokenIssuer>
      <!--

                The statefulSecurityContextToken section provides a way for user to turn on/off the stateful SCT
                feature in their web service, i.e. the issued sct will contain state information such as keybytes,
                LifeTime and base token inside it so that it no longer rely on the target service's token cache. 

                The "enabled" attribute is required for the <statefulSecurityContextToken> element, and 
                its default value is true.

                If the enabled attribute is set to true, all WSE enabled services will become capable of issuing
                a SecurityContextToken.  
                
                
            <statefulSecurityContextToken  enabled="true"/>
            -->
      <!--

                The ttlInSeconds section defines a user supplied default time-to-live for an IIssuedToken.
                It is optional, and its default value is 4 hours

            <ttlInSeconds value="insert a time-to-live for the securityContextToken in seconds" />
            -->

      <!--

                The serviceToken section defines a user supplied security Token Information for a target service to specify a token
                to encrypt the session key.  A SecurityTokenReference could be one example of keyInfoClause.  A URI attribute is used
                to select a service token among multiple target services.  The mapping was done between the RST.AppliesTo and the URI.
                If RST.AppliesTo is null, it implies that the target service is the same as this token issuer, and users can use an empty
                string "" to specify a service token.

            <serviceToken>
		<add URI="">
                     <KeyInfo>
                          <insert keyInfoClause here>
                     </KeyInfo>
		</add>
            </serviceToken>
            -->

    </tokenIssuer>
  </microsoft.web.services3>
</configuration>
